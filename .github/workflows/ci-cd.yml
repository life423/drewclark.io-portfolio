name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          api/package-lock.json
          app/package-lock.json
          
    - name: Install root dependencies
      run: |
        # Try npm ci first, fall back to npm install if no package-lock.json
        if [ -f package-lock.json ]; then 
          npm ci
        else 
          npm install
          # Generate package-lock.json for future runs
          npm install --package-lock-only
        fi
      
    - name: Install API dependencies
      working-directory: ./api
      run: |
        if [ -f package-lock.json ]; then 
          npm ci
        else 
          npm install
          npm install --package-lock-only
        fi

    - name: Install frontend dependencies
      working-directory: ./app
      run: |
        if [ -f package-lock.json ]; then 
          npm ci --legacy-peer-deps
        else 
          npm install --legacy-peer-deps
          npm install --package-lock-only --legacy-peer-deps
        fi

    - name: Build API
      working-directory: ./api
      run: |
        # Add build step if applicable
        # Example: npm run build
        echo "Building API"

    - name: Build frontend
      working-directory: ./app
      run: |
        npm run build

    - name: Run frontend tests
      working-directory: ./app
      run: |
        npm test -- --passWithNoTests
      continue-on-error: true  # Continue even if tests fail
      env:
        NODE_OPTIONS: "--legacy-peer-deps"
      
    - name: Run API tests
      working-directory: ./api
      run: |
        npm test
      continue-on-error: true  # Continue even if tests fail
      
    - name: Generate package-lock files for missing locations
      run: |
        # Check and generate package-lock files in all needed locations
        if [ ! -f package-lock.json ]; then
          echo "Generating root package-lock.json"
          npm install --package-lock-only
        fi
        
        if [ ! -f api/package-lock.json ]; then
          echo "Generating API package-lock.json"
          cd api && npm install --package-lock-only
        fi
        
        if [ ! -f app/package-lock.json ]; then
          echo "Generating frontend package-lock.json"
          cd app && npm install --package-lock-only
        fi
