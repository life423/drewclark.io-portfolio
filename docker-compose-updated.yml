version: '3.8'

services:
  # Nginx reverse proxy for handling HTTPS and caching
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - portfolio_network

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "3000"  # Only expose to internal network, nginx handles external requests
    environment:
      - NODE_ENV=production
      - QDRANT_URL=http://qdrant:6333
      - DOCKER_CONTAINER=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - qdrant
    volumes:
      - portfolio_data:/app/data  # Use named volume instead of bind mount
    restart: unless-stopped
    networks:
      - portfolio_network
    dns:
      - 8.8.8.8  # Use Google DNS as fallback
    # Health check to ensure container is working properly
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vector database for embeddings
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    expose:
      - "6333"
      - "6334"
    environment:
      - QDRANT_ALLOW_CORS=true
    restart: unless-stopped
    networks:
      - portfolio_network
    # Make sure Qdrant stays healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Named volumes for persistent data
volumes:
  qdrant_data:
    external: true  # Use the volume we created
  portfolio_data:
    external: true  # Use the volume we created
  nginx_logs:  # New volume for nginx logs

# Define an explicit network to ensure container communication
networks:
  portfolio_network:
    driver: bridge
